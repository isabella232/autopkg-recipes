#!/bin/sh



########## variable-ing ##########



workingDir="${3}/private/tmp/log4j-sniffer"
binaryPath="${3}/usr/local/bin/log4j-sniffer"



########## main process ##########



# Identify which binary to install based on platform architecture.
if [ "$(/usr/bin/arch)" = "arm64" ]; then
  dmgPath="$(/usr/bin/find "${workingDir}" -name "log4j-sniffer-arm64*.dmg")"
elif [ "$(/usr/bin/arch)" = "i386" ]; then
  dmgPath="$(/usr/bin/find "${workingDir}" -name "log4j-sniffer-x86*.dmg")"
else
  echo "❌ ERROR: Unknown architecture: $(/usr/bin/arch), unable to proceed."
  exit 1
fi


# Verify an installer disk image is present in working directory.
if [ -z "$dmgPath" ]; then
  echo "❌ ERROR: Disk image not found at ${workingDir}, unable to proceed."
  exit 1
else
  echo "Verified disk image is present at ${dmgPath}. Attempting to mount disk image..."
fi


# Mount disk image.
dmgName=$(/usr/bin/basename "$dmgPath" | /usr/bin/awk -F.dmg '{print $1}')
mountPoint="${3}/Volumes/${dmgName}"
/usr/bin/hdiutil attach "$dmgPath" -mountpoint "$mountPoint" -nobrowse


# Search for binary in mounted disk image, or exit if disk image did not mount successfully.
if [ -d "$mountPoint" ]; then
  echo "Mounted disk image at ${mountPoint}. Looking for installer packages..."
  binaryDmgPath=$(/usr/bin/find "$mountPoint" -name "log4j-sniffer")
  if [ -z "$binaryDmgPath" ]; then
    echo "❌ ERROR: Binary not found in mounted disk image, unable to proceed."
    exit 1
  else
    echo "Verified binary is present at ${binaryDmgPath}. Proceeding with installation..."
  fi
else
  echo "❌ ERROR: No mounted disk image found at ${mountPoint}, unable to proceed."
  exit 1
fi


# Install binary to /usr/local/bin.
/bin/cp "$binaryDmgPath" "${3}/usr/local/bin/"
echo "Installed $(/usr/bin/arch) build of log4j-sniffer to /usr/local/bin."
/usr/bin/xattr -d com.apple.quarantine "$binaryPath"
echo "Removed quarantine attributes from ${binaryPath}."


# Unmount disk image.
/usr/bin/hdiutil detach "$(/usr/sbin/diskutil info "$mountPoint" | /usr/bin/awk '/Device Identifier/ {print $NF}')"
